#pragma once

/* macros.h:
   Convenience macros. */

/* A flag for conditional block compilation. */
#define SETTING constexpr bool

/* For clarification of conditionally compiled blocks. */
#define COMPILE_IF(flag) if constexpr (flag)

/* Since the Debug setting is going to be used a lot,
   there might as well be a specific macro for it. */
#define IF_DEBUG COMPILE_IF(lyo::Settings::Debug)

/* Namespace macros for more readable code. */
#define BEGIN_LYO_NAMESPACE namespace lyo {
#define END_LYO_NAMESPACE }

/* Declare something that's in a namespace. */
#define NAMESPACE_DECL(namespace_name, object) namespace namespace_name { object; }

/* Bool enum for clearer code. */
#define BOOL_ENUM(name) enum class name : bool {off, on}

/* For "shorter" casts. */
#define SC static_cast
#define CC const_cast
#define DC dynamic_cast
#define RC reinterpret_cast

/* Null reference (a reference which doesn't reference anything). */
#define NULLREF(type) *RC<type*>(0)

/* Disable (delete) copy constructors which would otherwise be
   automatically generated by the compiler. */
#define DISABLE_COPY_CTORS(type) type(const type&) = delete; \
								 type& operator=(const type&) = delete

/* Class member function property shorteners. */
#define SAFE const noexcept